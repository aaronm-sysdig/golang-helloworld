name: Build Docker Image

on:
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
        - info
        - warning
        - debug
env:
  SYSDIG_URL: https://app.au1.sysdig.com
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BYPASS_SCAN_FAIL: false

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Download go Dependencies
      run: |
        go get google.golang.org/grpc
        go get rsc.io/quote
        
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }} --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Sysdig Secure Inline Scan
      # You may pin to the exact commit or the version.
      # uses: sysdiglabs/scan-action@d244738066a84d4dcebfde64d5d48a01d88d5322
      uses: sysdiglabs/scan-action@v5
      with:
        # Tag of the image to analyse.
        image-tag: docker://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
        # API token for Sysdig Scanning auth.
        sysdig-secure-token: ${{ secrets.SECURE_API_TOKEN }}
        # Github App token to publish the checks. By default it will use "github.token value". See https://docs.github.com/en/free-pro-team@latest/actions/reference/authentication-in-a-workflow#about-the-github_token-secret
        github-token: # default is ${{ github.token }}
        # Sysdig Secure URL (ex: "https://secure-sysdig.com").
        sysdig-secure-url: # optional, default is https://secure.sysdig.com
        # Skip TLS verification when calling secure endpoints.
        sysdig-skip-tls: # optional
        # Path to Dockerfile (ex: "./Dockerfile").
        dockerfile-path: # optional
        # Don't fail the execution of this action even if the scan result is FAILED.
        ignore-failed-scan: # optional
        # Report only once an issue with a specific package and its version. Default to false
        unique-report-by-package: # optional
        # If specified, where should we scan the image from. Possible values:
        #  pull            Pull the image from the registry.
        #                  Default if not specified.
        #  docker-daemon   Get the image from the Docker daemon.
        #                  The docker socket must be available at /var/run/docker.sock
        #  cri-o           Get the image from containers-storage (CRI-O and others).
        #                  Images must be stored in /var/lib/containers
        #  docker-archive  Image is provided as a Docker .tar file (from docker save).
        #                  Specify path to the tar file with 'input-path'
        #  oci-archive     Image is provided as a OCI image tar file.
        #                  Specify path to the tar file with 'input-path'
        #  oci-dir         Image is provided as a OCI image, untared.
        #                  Specify path to the directory file with 'input-path'
        input-type: # default is pull
        # Path to the tar file or OCI layout directory.
        input-path: # optional
        # Run the scan container with this username or UID.
        # It might required if scanning from docker-daemon or cri-o to provide a user with permissions on the socket or storage.

        run-as-user: # optional
        # Additional parameters added to the secure-inline-scan container execution.
        extra-parameters: # optional
        # Additional parameters added to the docker command when executing the secure-inline-scan container execution.
        extra-docker-parameters: # optional
        # Filter output annotations by severity. Default is "unknown".
        severity: # optional
              

    - name: Log in to the Container registry
      run: docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} ${{ env.REGISTRY }}
    
    - name: Push the Docker image
      run: docker push -a ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
